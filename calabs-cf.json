
{
    "Description": "My Cloud Academy Labs 2-Tier Scalable API Template",
    "Parameters": {
      "VPCAZ": {
        "Type": "AWS::EC2::AvailabilityZone::Name",
        "Description": "The Availability Zone to use for the simple VPC.",
        "AllowedPattern": "^(?!us-west-2d).*$",
        "ConstraintDescription": "Availability zone must not be us-west-2d."
      },
      "NumberOfNodes": {
        "Type": "Number",
        "Description": "The number of EC2 nodes the service should have.",
        "Default": 2
      },
      "NodeSize": {
        "Type": "String",
        "Description": "The type of node to use for your system",
        "Default": "m3.medium"
      },
      "RunNumber": {
        "Type": "Number",
        "Description": "Used to force the ASG's nodes' UserData to update.",
        "Default": 1
      },
      "TableThroughput": {
        "Type": "Number",
        "Description": "The number of queries per second the table should support.",
        "Default": 10
      },
      "VPCClassBOctet": {
        "Type": "Number",
        "Description": "The Class B block to use for the VPC (0-255).",
        "MaxValue": 255,
        "MinValue": 0,
        "Default": 0
      }
    },
    "Resources": {
      "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": { "Fn::Join": [ "", [ "10.", { "Ref": "VPCClassBOctet" }, ".0.0/16" ] ] }
        }
      },
      "PublicSubnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "AvailabilityZone": { "Ref": "VPCAZ" },
          "CidrBlock": { "Fn::Join": [ "", [ "10.", { "Ref": "VPCClassBOctet" }, ".0.0/24" ] ] },
          "MapPublicIpOnLaunch": true,
          "VpcId": { "Ref": "VPC" }
        }
      },
      "PrivateSubnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "AvailabilityZone": { "Ref": "VPCAZ" },
          "CidrBlock": { "Fn::Join": [ "", [ "10.", { "Ref": "VPCClassBOctet" }, ".1.0/24" ] ] },
          "VpcId": { "Ref": "VPC" }
        }
      },
  
      "GatewayToInternet": {
        "Type": "AWS::EC2::InternetGateway"
      },
      "NATInstance": {
        "DependsOn": ["GatewayAttachmentToVPC"],
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "AvailabilityZone": { "Ref": "VPCAZ" },
          "ImageId": {
            "Fn::FindInMap": ["AWSNATAMIs", { "Ref": "AWS::Region" }, "AMI"]
          },
          "InstanceType": "m3.medium",
          "SecurityGroupIds": [{ "Ref": "InstancesToNATSecurityGroup" }],
          "SourceDestCheck": false,
          "SubnetId": { "Ref": "PublicSubnet" }
        }
      },
      "RoutesForPublicSubnet": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": { "Ref": "VPC" }
        }
      },
      "RoutesForPrivateSubnet": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": { "Ref": "VPC" }
        }
      },
      "GenericNACL": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
          "VpcId": { "Ref": "VPC" }
        }
      },
  
      "GatewayAttachmentToVPC": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "InternetGatewayId": { "Ref": "GatewayToInternet" },
          "VpcId": { "Ref": "VPC" }
        }
      },
  
      "RouteToGateway": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": { "Ref": "GatewayToInternet" },
          "RouteTableId": { "Ref": "RoutesForPublicSubnet" }
        }
      },
      "RouteToNat": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "InstanceId": { "Ref": "NATInstance" },
          "RouteTableId": { "Ref": "RoutesForPrivateSubnet" }
        }
      },
      "NACLInboundEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "CidrBlock": "0.0.0.0/0",
          "NetworkAclId": { "Ref": "GenericNACL" },
          "PortRange": { "From": 0, "To": 65535 },
          "Protocol": 6,
          "RuleAction": "allow",
          "RuleNumber": 100
        }
      },
      "NACLOutboundEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "CidrBlock": "0.0.0.0/0",
          "Egress": true,
          "NetworkAclId": { "Ref": "GenericNACL" },
          "PortRange": { "From": 0, "To": 65535 },
          "Protocol": 6,
          "RuleAction": "allow",
          "RuleNumber": 100
        }
      },
  
      "NACLBindingForPublicSubnet": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": { "Ref": "PublicSubnet" },
          "NetworkAclId": { "Ref": "GenericNACL" }
        }
      },
      "NACLBindingForPrivateSubnet": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": { "Ref": "PrivateSubnet" },
          "NetworkAclId": { "Ref": "GenericNACL" }
        }
      },
      "RoutesBindingForPublicSubnet": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": { "Ref": "RoutesForPublicSubnet" },
          "SubnetId": { "Ref": "PublicSubnet" }
        }
      },
      "RoutesBindingForPrivateSubnet": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": { "Ref": "RoutesForPrivateSubnet" },
          "SubnetId": { "Ref": "PrivateSubnet" }
        }
      },
  
      "LoadBalancer": {
        "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties": {
          "Listeners": [
            {
              "InstancePort": 8888,
              "InstanceProtocol": "HTTP",
              "LoadBalancerPort": 80,
              "Protocol": "HTTP"
            }
          ],
          "Scheme": "internet-facing",
          "SecurityGroups": [{ "Ref": "InternetToLBSecurityGroup" }],
          "Subnets": [{ "Ref": "PublicSubnet" }]
        }
      },
      "InstancesGroup": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
          "Cooldown": 60,
          "DesiredCapacity": { "Ref": "NumberOfNodes" },
          "HealthCheckGracePeriod": 30,
          "HealthCheckType": "EC2",
          "LaunchConfigurationName": { "Ref": "InstancesConfig" },
          "LoadBalancerNames": [{ "Ref": "LoadBalancer" }],
          "MaxSize": { "Ref": "NumberOfNodes" },
          "MetricsCollection": [{ "Granularity": "1Minute" }],
          "MinSize": { "Ref": "NumberOfNodes" },
          "VPCZoneIdentifier": [{ "Ref": "PrivateSubnet" }]
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MaxBatchSize": 1,
            "MinInstancesInService": 1,
            "PauseTime": 30,
            "WaitOnResourceSignals": false
          }
        }
      },
      "InstancesConfig": {
        "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Properties": {
          "AssociatePublicIpAddress": false,
          "IamInstanceProfile": { "Ref": "DynamoAccessInstanceProfile" },
          "ImageId": {
            "Fn::FindInMap": ["AWSLinuxAMIs", { "Ref": "AWS::Region" }, "AMI"]
          },
          "InstanceMonitoring": true,
          "InstanceType": { "Ref": "NodeSize" },
          "SecurityGroups": [{ "Ref": "LBToInstancesSecurityGroup" }],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "\n",
                [
                  "#!/bin/bash",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "echo 'Running number ",
                        { "Ref": "RunNumber" },
                        "' > /tmp/runnum.log"
                      ]
                    ]
                  },
                  "yum install --enablerepo=epel -y git nodejs npm",
                  "npm config set registry http://registry.npmjs.org/",
                  "npm install -g forever@0.14.1",
                  "git clone https://github.com/cloudacademy/dynamo-demo",
                  {
                    "Fn::Join": [
                      "",
                      ["export AWS_REGION=", { "Ref": "AWS::Region" }]
                    ]
                  },
                  "cd dynamo-demo",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "forever start server.js --port 8888 --table ",
                        { "Ref": "DynamoTableForTodos" }
                      ]
                    ]
                  }
                ]
              ]
            }
          }
        }
      },
  
      "DynamoTableForTodos": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "id",
              "AttributeType": "S"
            }
          ],
          "KeySchema": [
            {
              "AttributeName": "id",
              "KeyType": "HASH"
            }
          ],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": { "Ref": "TableThroughput" },
            "WriteCapacityUnits": { "Ref": "TableThroughput" }
          }
        }
      },
      "DynamoAccessRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": ["ec2.amazonaws.com"] },
                "Action": ["sts:AssumeRole"]
              }
            ]
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
          ],
          "Path": "/"
        }
      },
      "DynamoAccessInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [{ "Ref": "DynamoAccessRole" }]
        }
      },
  
      "LBToInstancesSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Load balancer to instances",
          "SecurityGroupIngress": [
            {
              "FromPort": 8888,
              "IpProtocol": "TCP",
              "SourceSecurityGroupId": { "Ref": "InternetToLBSecurityGroup" },
              "ToPort": 8888
            }
          ],
          "VpcId": { "Ref": "VPC" }
        }
      },
      "InternetToLBSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Internet to load balancer",
          "SecurityGroupIngress": [
            {
              "FromPort": 80,
              "IpProtocol": "TCP",
              "CidrIp": "0.0.0.0/0",
              "ToPort": 80
            }
          ],
          "VpcId": { "Ref": "VPC" }
        }
      },
      "InstancesToNATSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Instances to NAT instance",
          "SecurityGroupIngress": [
            {
              "FromPort": 0,
              "IpProtocol": -1,
              "SourceSecurityGroupId": { "Ref": "LBToInstancesSecurityGroup" },
              "ToPort": 65535
            }
          ],
          "VpcId": { "Ref": "VPC" }
        }
      }
    },
    "Outputs": {
      "ELBDNS": {
        "Description": "The DNS for the ELB / our app.",
        "Value": {
          "Fn::Join": [
            "",
            [
              "http://",
              { "Fn::GetAtt": ["LoadBalancer", "DNSName"] },
              "/index.html"
            ]
          ]
        }
      }
    },
    "Mappings": {
      "AWSNATAMIs": {
        "us-east-1": { "AMI": "ami-303b1458" },
        "us-west-2": { "AMI": "ami-69ae8259" },
        "us-west-1": { "AMI": "ami-7da94839" },
        "eu-west-1": { "AMI": "ami-6975eb1e" },
        "eu-central-1": { "AMI": "ami-46073a5b" },
        "ap-southeast-1": { "AMI": "ami-b49dace6" },
        "ap-northeast-1": { "AMI": "ami-03cf3903" },
        "ap-southeast-2": { "AMI": "ami-e7ee9edd" },
        "sa-east-1": { "AMI": "ami-fbfa41e6" }
      },
      "AWSLinuxAMIs": {
        "us-east-1": { "AMI": "ami-1ecae776" },
        "us-west-2": { "AMI": "ami-e7527ed7" },
        "us-west-1": { "AMI": "ami-d114f295" },
        "eu-west-1": { "AMI": "ami-a10897d6" },
        "eu-central-1": { "AMI": "ami-a8221fb5" },
        "ap-northeast-1": { "AMI": "ami-cbf90ecb" },
        "ap-southeast-1": { "AMI": "ami-68d8e93a" },
        "ap-southeast-2": { "AMI": "ami-fd9cecc7" },
        "sa-east-1": { "AMI": "ami-b52890a8" }
      }
    }
  }
  